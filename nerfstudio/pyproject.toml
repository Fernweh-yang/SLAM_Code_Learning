# ! 选定构建系统为setuptools
# pyproject.toml 文件主要支持 PEP 517 定义的构建系统
# 除了setuptools，PEP517还支持flit、poetry、build三种构建系统
[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

# ! 项目的元数据metadata(描述数据的数据)
[project]
name = "nerfstudio"
version = "0.3.4"
description = "All-in-one repository for state-of-the-art NeRFs"
readme = "README.md"
license = { text="Apache 2.0"}
requires-python = ">=3.8.0"
# 指定项目属于哪些分类
classifiers = [
    "Development Status :: 3 - Alpha",  # 开发状态：指示软件项目的开发进度和稳定性从1->7
    "Programming Language :: Python",
]
# 项目依赖项列表
# 这里的库在pip install .时会自动安装
dependencies = [
    "appdirs>=1.4",
    "av>=9.2.0",
    "comet_ml>=3.33.8",
    "cryptography>=38",
    "tyro>=0.5.10",
    "gdown>=4.6.0",
    "ninja>=1.10",
    "h5py>=2.9.0",
    "imageio>=2.21.1",
    'importlib-metadata>=6.0.0; python_version < "3.10"',
    "ipywidgets>=7.6",
    "jaxtyping>=0.2.15",
    "jupyterlab>=3.3.4",
    "matplotlib>=3.5.3",
    "mediapy>=1.1.0",
    "msgpack>=1.0.4",
    "msgpack_numpy>=0.4.8",
    "nerfacc==0.5.2",
    "open3d>=0.16.0",
    "opencv-python==4.6.0.66",
    "Pillow>=9.3.0",
    "plotly>=5.7.0",
    "protobuf<=3.20.3,!=3.20.0",
    # TODO(1480) enable when pycolmap windows wheels are available
    # "pycolmap==0.3.0",
    "pymeshlab>=2022.2.post2; platform_machine != 'arm64'",
    "pyngrok>=5.1.0",
    "python-socketio>=5.7.1",
    "pyquaternion>=0.9.9",
    # TODO we can switch back to (non-new) rawpy if they start releasing arm64
    # wheels. https://github.com/letmaik/rawpy/issues/171#issuecomment-1572627747
    "rawpy>=0.18.1; platform_machine != 'arm64'",
    "newrawpy>=0.18.1; platform_machine == 'arm64'",
    "requests",
    "rich>=12.5.1",
    "scikit-image>=0.19.3",
    "splines==0.3.0",
    "tensorboard>=2.13.0",
    "torch>=1.13.1",
    "torchvision>=0.14.1",
    "torchmetrics[image]>=1.0.1",
    "typing_extensions>=4.4.0",
    "viser==0.1.17",
    "nuscenes-devkit>=1.1.1",
    "wandb>=0.13.3",
    "xatlas",
    "trimesh>=3.20.2",
    "timm==0.6.7",
    "gsplat==0.1.0",
    "pytorch-msssim",
    "pathos"
]

# ! 项目相关的链接信息
[project.urls]
"Documentation" = "https://docs.nerf.studio"


# ! 定义项目的一些可选依赖关系，分别按照功能进行了分组
# 如果要安装这里的库需要额外指定，比如:pip install .[gen,docs]来灵活的选择安装哪些库
[project.optional-dependencies]
# Generative related dependencies
gen = [
    "diffusers==0.16.1",
    "transformers==4.29.2",
    "accelerate==0.19.0",
    "bitsandbytes==0.39.0",
    "sentencepiece==0.1.99",
]


# Development packages
dev = [
    "black[jupyter]==23.3.0",
    "pre-commit==3.3.2",
    "pytest==7.1.2",
    "pytest-xdist==2.5.0",
    "typeguard==2.13.3",
    "ruff==0.0.267",
    "sshconf==0.2.5",
    "pycolmap>=0.3.0",  # NOTE: pycolmap==0.3.0 is not available on newer python versions
    "diffusers==0.16.1",
    "opencv-stubs==0.0.7",
    "transformers==4.29.2",
    "pyright==1.1.331",
    "projectaria_tools[all]>=1.2.0",
]

# Documentation related packages
docs = [
    "furo==2022.09.29",
    # Specifying ipython for https://github.com/ipython/ipython/issues/13845
    "ipython==8.6.0",
    "readthedocs-sphinx-search==0.1.2",
    "myst-nb==0.16.0",
    "nbconvert==7.2.5",
    "nbformat==5.5.0",
    "sphinx==5.2.1",
    "sphinxemoji==0.2.0",
    "sphinx-argparse==0.3.1",
    "sphinx-copybutton==0.5.0",
    "sphinx-design==0.2.0",
    "sphinxext-opengraph==0.6.3"
]

# ! 定义了一些脚本命令，用于在命令行中执行项目的特定功能或任务
# 在终端中运行ns-train就相当于运行了nerfstudio.scripts.train:entrypoint这个函数
[project.scripts]
# Note, add entrypoint name to nerfstudio/scripts/completions/install.py to include CLI completion
ns-install-cli = "nerfstudio.scripts.completions.install:entrypoint"
ns-process-data = "nerfstudio.scripts.process_data:entrypoint"
ns-download-data = "nerfstudio.scripts.downloads.download_data:entrypoint"
ns-train = "nerfstudio.scripts.train:entrypoint"
ns-viewer = "nerfstudio.scripts.viewer.run_viewer:entrypoint"
ns-eval = "nerfstudio.scripts.eval:entrypoint"
ns-render = "nerfstudio.scripts.render:entrypoint"
ns-export = "nerfstudio.scripts.exporter:entrypoint"
ns-dev-test = "nerfstudio.scripts.github.run_actions:entrypoint"
ns-dev-sync-viser-message-defs = "nerfstudio.scripts.viewer.sync_viser_message_defs:entrypoint"

[options]
# equivalent to using --extra-index-url with pip, which is needed for specifying the CUDA version torch and torchvision
dependency_links = [
    "https://download.pytorch.org/whl/cu118"
]

# ! 制定了在构建安装时要包含的python包
[tool.setuptools.packages.find]
include = ["nerfstudio*"]   # 包含./nerfstudio包

# ! 指定了要包含在项目包中的其他非代码文件
[tool.setuptools.package-data]
"*" = ["*.cu", "*.json", "py.typed", "setup.bash", "setup.zsh"]

# ! 代码格式化工具black的配置
[tool.black]
line-length = 120   # 指定行长度为 120 字符。

# ! 测试框架Pytest的配置
# 在终端输入pytest就可以执行测试
[tool.pytest.ini_options]
# 对nerfstudio包启用类型检查，禁用警告
addopts = "--typeguard-packages=nerfstudio --disable-warnings"
# 执行pytest后，运行的测试文件在./tests下
testpaths = [
    "tests",
]

# ! Pyright 是一个用于 Python 的静态类型检查器，通常与VSCode一起使用
# 需要vscode中额外安装pyright,然后就可以实时的静态类型检查和更好的代码补全支持。
# 但更推荐用Pylance，是Pyright的增强版
[tool.pyright]
include = ["nerfstudio"]            # 指定Pyright需要分析的目录
exclude = ["**/node_modules",       # 指定Pyright不需要分析的目录
    "**/__pycache__",
]
defineConstant = { DEBUG = true }

reportMissingImports = "warning"    # 配置对于缺失的导入的报告级别。在这里，设置为警告级别
reportMissingTypeStubs = false      # 配置是否报告缺失的类型存根文件。在这里，设置为不报告。
reportPrivateImportUsage = false    # 配置是否报告对私有导入的使用。在这里，设置为不报告。

pythonVersion = "3.8"
pythonPlatform = "Linux"

# ! Ruff 是一个代码静态分析工具，用于执行代码审查和提供有关代码风格、潜在错误和最佳实践的建议。
[tool.ruff]
line-length = 120   # 指定每行代码的最大字符数。
# 选择特定的代码审查规则。
select = [
    "E",  # pycodestyle errors.
    "F",  # Pyflakes rules.
    "PLC",  # Pylint convention warnings.
    "PLE",  # Pylint errors.
    "PLR",  # Pylint refactor recommendations.
    "PLW",  # Pylint warnings.
]
# 忽略特定的代码审查规则。
ignore = [
    "E501",  # Line too long.
    "F722",  # Forward annotation false positive from jaxtyping. Should be caught by pyright.
    "F821",  # Forward annotation false positive from jaxtyping. Should be caught by pyright.
    "PLR2004",  # Magic value used in comparison.
    "PLR0915",  # Too many statements.
    "PLR0913",  # Too many arguments.
    "PLC0414",  # Import alias does not rename variable. (this is used for exporting names)
    "PLC1901",  # Use falsey strings.
    "PLR5501",  # Use `elif` instead of `else if`.
    "PLR0911",  # Too many return statements.
    "PLR0912",  # Too many branches.
    "PLW0603",  # Globa statement updates are discouraged.
    "PLW2901",  # For loop variable overwritten.
]
